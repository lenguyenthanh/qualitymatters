apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'hu.supercluster.paperwork'
apply from: '../code_quality_tools/jacoco.gradle'
apply plugin: 'com.frogermcs.androiddevmetrics'
apply from: '../code_quality_tools/quality.gradle'

paperwork {
    set = [
        gitSha:    gitSha(),
        buildDate: buildTime("dd-MM-yyyy HH:00:00 z", "UTC"),
    ]
}

android {
    // Declared in dependencies.gradle in the root of the project.
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    defaultConfig {
        applicationId 'com.artemzin.qualitymatters'
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode versions.code // Notice that you may want to use BUILD_NUMBER from CI in real project with own CI.
        versionName versions.name

        // Notice that we have custom Instrumentation test runner to change application class (to mock dependencies)!
        testInstrumentationRunner 'com.artemzin.qualitymatters.functional_tests.QualityMattersFunctionalTestsRunner'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        qualityMatters {
            storeFile file('keystore.jks')
            storePassword 'qualitymatters'
            keyAlias 'qualitymatters'
            keyPassword 'qualitymatters'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.qualityMatters
            applicationIdSuffix '.debug'

            // Enables code coverage with Jacoco only for instrumentation tests.
            // Coverage for JVM tests done by code_quality_tools/jacoco.gradle.
            testCoverageEnabled true
        }

        release {
            signingConfig signingConfigs.qualityMatters
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt')

            // Enables code coverage with Jacoco only for instrumentation tests.
            // Coverage for JVM tests done by code_quality_tools/jacoco.gradle.
            testCoverageEnabled true
        }
    }

    sourceSets {
        // Unit tests live in src/unitTest.
        test.java.srcDir 'src/unitTests/java'

        // Integration tests live in src/integrationTest.
        test.java.srcDir 'src/integrationTests/java'

        // Unit tests for debug build type specific code live in src/debugUnitTest.
        testDebug.java.srcDir 'src/debugUnitTests/java'

        // Unit tests for release build type specific code live in src/releaseUnitTest.
        testRelease.java.srcDir 'src/releaseUnitTests/java'

        // Functional tests live in src/functionalTests.
        androidTest.java.srcDir 'src/functionalTests/java'
    }

    lintOptions {
        warningsAsErrors true
        abortOnError true // Fail early.

        disable 'GoogleAppIndexingWarning' // App does not have deep linking.
        disable 'InvalidPackage' // Okio references java.nio that does not presented in Android SDK.
    }

    packagingOptions {
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    // This allows us see tests execution progress in the output on the CI.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            exceptionFormat 'full'
        }
    }
}

// Libraries declared in dependencies.gradle in the root of the project
dependencies {
    compile libraries.dagger
    apt libraries.daggerCompiler
    compile libraries.javaxInject
    compile libraries.javaxAnnotationApi

    compile libraries.rxJava

    compile libraries.okHttp
    compile libraries.retrofit
    compile libraries.retrofitGsonConverter
    compile libraries.retrofitRxJavaAdapter

    // Do not compile AutoValue dependencies to the app.
    apt libraries.autoValue
    // Make AutoValue annotation visible to the compiler.
    provided libraries.autoValue
    apt libraries.autoGson
    compile libraries.gson

    compile libraries.supportAnnotations
    compile libraries.supportAppCompat
    compile libraries.supportDesign
    compile libraries.supportRecyclerView
    compile libraries.supportCardView

    compile libraries.butterKnife
    compile libraries.picasso
    compile libraries.picassoOkHttpDownloader
    compile libraries.timber

    // Analytics. Why? To make app more real.
    // We mock analytics for Integration tests under Robolectric and Functional (UI) tests under Instrumentation!
    compile libraries.yandexAppMetrica

    // Developer tools (Developer Settings)
    debugCompile libraries.okHttpLoggingInterceptor
    debugCompile libraries.stetho
    debugCompile libraries.stethoOkHttp
    debugCompile libraries.leakCanary
    debugCompile libraries.tinyDancer
    debugCompile libraries.paperwork
    debugCompile libraries.lynx

    testCompile libraries.junit
    testCompile libraries.robolectric
    testCompile libraries.assertJ
    testCompile libraries.equalsVerifier
    testCompile libraries.okHttpMockWebServer
    testCompile libraries.mockitoCore
    testCompile libraries.devMetricsNoOp

    androidTestCompile libraries.supportTestRunner
    androidTestCompile libraries.supportTestRules
    androidTestCompile libraries.espressoCore
    androidTestCompile(libraries.espressoContrib) {
        // Causes IncompatibleClassChangeError. As alwaysâ€¦
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
        exclude module: 'support-v4'
    }
    androidTestCompile libraries.okHttpMockWebServer
}

configurations.all {
    resolutionStrategy {
        // Force our version of support-annotations, we have a conflict between app and androidTest dependency resolution.
        force libraries.supportAnnotations
        force libraries.gson
    }
}
